{"version":3,"sources":["App.jsx","index.jsx"],"names":["SORT_FIELD_NAME","SORT_FIELD_LENGTH","localeGoods","map","good","name","length","key","uuidv4","App","useState","sortField","setSortField","reverse","setReverse","visibleGoods","goods","preperedGoods","sort","good1","good2","localeCompare","getPreperedGoods","isResetButtonVisible","className","onClick","type","cn","ReactDOM","render","document","getElementById"],"mappings":"yPAmBMA,EAAkB,OAClBC,EAAoB,SAEpBC,EAhByB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAMkCC,KAAI,SAAAC,GAAI,MAC1C,CACEC,KAAMD,EACNE,OAAQF,EAAKE,OACbC,IAAKC,kBA6BF,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EA7BR,SAA0BC,EAA1B,GAA0D,IAAvBL,EAAsB,EAAtBA,UAAWE,EAAW,EAAXA,QACtCI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKX,EACH,OAAOmB,EAAMR,GAAWU,cAAcD,EAAMT,IAE9C,KAAKV,EACH,OAAOkB,EAAMR,GAAaS,EAAMT,GAElC,QACE,OAAO,MAKXE,GACFI,EAAcJ,UAGTI,EAOcK,CACnBpB,EAAa,CAAES,YAAWE,YAQtBU,EAAuBZ,GAAaE,EAE1C,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMb,EAAaZ,IAC5B0B,KAAK,SACLF,UACEG,IAAG,SAAU,UAAW,CACtB,WAAYhB,IAAcX,IALhC,iCAYA,wBACEyB,QAAS,kBAAMb,EAAaX,IAC5ByB,KAAK,SACLF,UACEG,IAAG,SAAU,UAAW,CACtB,WAAYhB,IAAcV,IALhC,4BAYA,wBACEwB,QAAS,kBAAMX,GAAYD,IAC3Ba,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CAAE,YAAad,IAHvD,qBAQCU,GAEG,wBACEE,QA7Ca,WACvBb,EAAa,IACbE,GAAW,IA4CDY,KAAK,SACLF,UAAU,4BAHZ,sBAUN,6BACGT,EAAaZ,KAAI,SAAAC,GAAI,OACpB,oBAAmB,UAAQ,OAA3B,SAAmCA,EAAKC,MAA/BD,EAAKG,cCpHxBqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fca88e3b.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\n\nconst localeGoods = goodsFromServer.map(good => (\n  {\n    name: good,\n    length: good.length,\n    key: uuidv4(),\n  }\n));\n\nfunction getPreperedGoods(goods, { sortField, reverse }) {\n  const preperedGoods = [...goods];\n\n  if (sortField) {\n    preperedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_NAME:\n          return good1[sortField].localeCompare(good2[sortField]);\n\n        case SORT_FIELD_LENGTH:\n          return good1[sortField] - good2[sortField];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preperedGoods.reverse();\n  }\n\n  return preperedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverse, setReverse] = useState(false);\n\n  const visibleGoods = getPreperedGoods(\n    localeGoods, { sortField, reverse },\n  );\n\n  const handleClickReset = () => {\n    setSortField('');\n    setReverse(false);\n  };\n\n  const isResetButtonVisible = sortField || reverse;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n          type=\"button\"\n          className={\n            cn('button', 'is-info', {\n              'is-light': sortField !== SORT_FIELD_NAME,\n            })\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          type=\"button\"\n          className={\n            cn('button', 'is-info', {\n              'is-light': sortField !== SORT_FIELD_LENGTH,\n            })\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReverse(!reverse)}\n          type=\"button\"\n          className={cn('button', 'is-warning', { 'is-light': !reverse })}\n        >\n          Reverse\n        </button>\n\n        {isResetButtonVisible\n          && (\n            <button\n              onClick={handleClickReset}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good.key} data-cy=\"Good\">{good.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}